export const exercise_1 = `
# 第一章 习题
## 1.1 解释器和编译器有什么区别？

编译器将高级语言源程序翻译成低级语言程序（经常是机器语言程序），然后由虚拟机（或者是硬件）执行编译的结果程序。在 30 多年前的 BASIC 语言阶段，解释器的功能是这样介绍的：它将高级语言的源程序翻译成一种中间语言程序，然后对中间语言程序进行解释执行。因为在那个年代，解释器的两个功能（编译和解释）是合在一个程序中的，这个程序被称为解释器。进入 Java 语言时代，解释器的上述两个功能分离成两个程序，前一个程序称编译器，它把 Java 语言的程序翻译成一种中间语言程序，这种中间语言叫做字节码；后一个程序称为解释器，它对字节码程序进行解释执行。

为了避免混淆，用编译执行和解释执行这两个术语来加以区别。一般来说，解释执行的效率低于编译执行的效率，究竟相差多少，和所用的中间语言关系很大。一个极端是，没有编译阶段，直接对源程序进行解释执行，这时的执行效率最低。另一个极端是，没有解释阶段，编译器将源程序直接翻译成机器语言程序，这时的执行效率最高。实际的解释执行介于这两个极端之间，选择一种合适的中间语言。

为什么说解释执行的效率低，以上面的第一种极端情况作解释。对于编译执行来说，对源程序的词法分析、语法分析和语义分析只要进行一次；而对于解释执行来说，每次执行到源程序的某个语句，都要对它进行一次词法分析、语法分析和语义分析，确定了这个语句的含义后，才能执行该含义指定的计算。显然，反复分析循环体降低了解释执行的效率。所以解释执行都要寻找一种适合于解释的中间语言，以减少反复分析需要的时间。反过来，如果源语言没有循环构造，

如历史上的作业控制语言，那么解释执行的效率最高，因为它省去了复杂的代码生成和代码优化等工作。

像 Java 语言这种解释方式的优点是，与机器和平台无关的中间语言使得中间语言程序能通过网络传到其他站点上运行，只要那里有一个中间语言的解释器就可以了。


## 1.2 编译器的逻辑阶段可以怎样分组？

编译器的阶段从逻辑上可以分成两组：一是由词法分析、语法分析和语义分析构成的编译器的分析部分，二是由中间代码生成、代码生成和代码优化构成的编译器的综合部分。

另一种分组方式是分成前端和后端两部分，前端是指编译器中完成从源程序到中间表示的那部分程序，后端是指编译器中完成从中间表示到目标语言程序的那部分程序。它和上面的分组方式是有区别的，例如，有些处理从逻辑上看属于综合部分，但它可能是放在前端完成的。一个具体事例是，从逻辑上看，变量的存储分配属于综合部分，但编译器的前端知道了变量的类型后，也就知道了该变量需要多少存储单元，因此通常是在前端完成变量的存储分配。

还有一种分组方式是按遍来分。一个编译过程可以由一遍、两遍或多遍来完成。每一遍扫描的处理可完成一个阶段或多个阶段的工作。对于多遍的编译器，第一遍的输入是用户写的源程序，最后一遍的输出是目标语言程序，其余情况下则为上一遍的输出是下一遍的输入。

`